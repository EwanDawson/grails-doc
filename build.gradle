import grails.doc.DocPublisher
import grails.doc.PdfBuilder
import grails.doc.macros.SourceMacro

buildscript {
    repositories {
        mavenCentral()
        mavenRepo urls: "http://download.java.net/maven/2/"
    }

    dependencies {
        classpath "org.grails:grails-docs:1.3.5", {
            exclude module: "core-renderer"
        }
    
        classpath "org.slf4j:slf4j-log4j12:1.5.8",
                 "org.slf4j:jcl-over-slf4j:1.5.8",
                 "org.xhtmlrenderer:core-renderer:R8"
    }
}

apply plugin: "base"

checkOutDir = "${buildDir.path}/checkout"
outputDir = "${buildDir.path}/docs"
grailsHome = System.getProperty("grails.home")

task fetchGrailsSource << {
    ant.mkdir dir: checkOutDir

    println "Downloading Grails source code. If you already have a copy " + 
            "of the Grails source code checked out you can avoid this download " +
            "by setting the grails.home system property to point to your local " +
            "copy of the source. See README.txt for more information."

    def zipFile = "${checkOutDir}/grails-src.zip"
    ant.get src: "http://github.com/grails/grails-core/zipball/master", dest: zipFile, verbose: true

    ant.unzip src: zipFile, dest: checkOutDir, {
        mapper type: "regexp", from: "(grails-grails-core-\\S*?/)(.*)", to: "grails-src/\\2"
    }

    project.grailsHome = "$checkOutDir/grails-src"

    println "Grails source code has been downloaded to ${relativePath(grailsHome)}"
}

fetchGrailsSource.onlyIf { !grailsHome }

task apiDocs(type: GradleBuild, dependsOn: 'fetchGrailsSource') {
    tasks = ["docs"]

    doFirst {
        // grailsHome may have been set during the execution of 'fetchGrailsSource'
        // so we have to defer setting the build file location to execution time.
        buildFile = "${project.grailsHome}/build.gradle"
    }
}

task copyApiDocs(type: Copy) {
    from "${project.grailsHome}/doc/api"
    into "${outputDir}/api"
}

task publishGuide(dependsOn: ['copyApiDocs']) {
    sourceDir = projectDir.path + "/src"
    targetDir = outputDir
    workDir = buildDir

    doLast {
        def props = new Properties()
        new File("${projectDir}/resources/doc.properties").withInputStream {input ->
            props.load(input)
        }
        new File("${project.grailsHome}/build.properties").withInputStream {input ->
            props.load(input)
        }

        def publisher = new DocPublisher(file(sourceDir), file(targetDir))
        publisher.ant = ant
        publisher.workDir = workDir
        publisher.title = props.title
        publisher.version = props."grails.version"
        publisher.authors = props.authors
        publisher.copyright = props.copyright
        publisher.footer = props.footer
        publisher.logo = '<a href="http://grails.org" target="_blank"><img alt="The Grails Framework" src="../img/grails.png" border="0"/></a>'
        publisher.sponsorLogo = '<a href="http://springsource.com" target="_blank"><img alt="SpringSource - Weapons for the War on Java Complexity" src="../img/springsource-logo.png" border="0"/></a>'
        publisher.engineProperties = props

        publisher.registerMacro(new SourceMacro(project.grailsHome))
        
        publisher.publish()
    }
}

task publishPdf(dependsOn: ['publishGuide']) << {
    PdfBuilder.build(outputDir, project.grailsHome)
}

task docs(dependsOn: ['publishPdf'])
